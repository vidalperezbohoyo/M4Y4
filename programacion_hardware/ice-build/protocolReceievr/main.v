// Code generated by Icestudio 0.10-rc1

`default_nettype none

//---- Top entity
module main #(
 parameter v6e1c38 = 1,
 parameter vbc0bbc = 0,
 parameter v421b28 = "v421b28.list",
 parameter v6bdaad = "v6bdaad.list",
 parameter v276dbe = 80,
 parameter v6f9858 = 160,
 parameter v0704cc = "v0704cc.list",
 parameter v7090a7 = "v7090a7.list",
 parameter vb9afdf = 80,
 parameter v9f7f3b = 0,
 parameter v45979e = 160,
 parameter vbb0639 = 0,
 parameter v932d72 = "v932d72.list",
 parameter v910b08 = "v910b08.list",
 parameter vd4ab85 = 80,
 parameter ve14fd6 = 80,
 parameter v91e2de = 160,
 parameter v354027 = "v354027.list",
 parameter v0cfdbf = 160,
 parameter v2436cf = 0,
 parameter v272d22 = 0,
 parameter vfccb12 = "vfccb12.list"
) (
 input vecd634,
 input vclk,
 output v06e9b7,
 output vc16043,
 output v2ff3d8,
 output v3fa45d,
 output v3a1698,
 output v680eee,
 output v59bc8e,
 output v20f3ff,
 output v67ba1a,
 output v199360,
 output va2e0dd,
 output v315fec,
 output v654671,
 output v337546,
 output v0fda21,
 output v7894cd,
 output [0:7] vinit
);
 localparam p0 = vbc0bbc;
 localparam p2 = v6e1c38;
 localparam p12 = v7090a7;
 localparam p21 = v0704cc;
 localparam p22 = v354027;
 localparam p23 = vfccb12;
 localparam p28 = v6f9858;
 localparam p30 = v45979e;
 localparam p32 = v0cfdbf;
 localparam p34 = v91e2de;
 localparam p44 = v421b28;
 localparam p45 = v6bdaad;
 localparam p46 = v932d72;
 localparam p47 = v910b08;
 localparam p49 = v2436cf;
 localparam p50 = vbb0639;
 localparam p52 = v9f7f3b;
 localparam p54 = v272d22;
 localparam p58 = v276dbe;
 localparam p59 = vd4ab85;
 localparam p62 = vb9afdf;
 localparam p65 = ve14fd6;
 wire w1;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire [0:7] w10;
 wire [0:7] w11;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire [0:7] w19;
 wire [0:7] w20;
 wire w24;
 wire [0:7] w25;
 wire w26;
 wire [0:7] w27;
 wire w29;
 wire w31;
 wire w33;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 wire [0:7] w48;
 wire [0:7] w51;
 wire [0:7] w53;
 wire [0:7] w55;
 wire [0:7] w56;
 wire [0:7] w57;
 wire [0:7] w60;
 wire [0:7] w61;
 wire [0:7] w63;
 wire [0:7] w64;
 wire [0:7] w66;
 wire [0:7] w67;
 wire w68;
 wire w69;
 wire w70;
 wire w71;
 wire w72;
 wire w73;
 wire w74;
 wire w75;
 wire w76;
 wire w77;
 wire w78;
 wire w79;
 wire w80;
 wire w81;
 wire w82;
 wire w83;
 wire w84;
 wire w85;
 wire w86;
 wire w87;
 wire w88;
 wire w89;
 wire w90;
 wire w91;
 wire [0:1] w92;
 wire [0:1] w93;
 wire [0:1] w94;
 wire [0:1] w95;
 wire [0:3] w96;
 wire [0:3] w97;
 wire [0:3] w98;
 wire [0:3] w99;
 wire [0:3] w100;
 wire [0:3] w101;
 wire [0:3] w102;
 wire [0:3] w103;
 wire w104;
 wire [0:3] w105;
 wire [0:2] w106;
 wire w107;
 wire [0:3] w108;
 wire w109;
 wire [0:3] w110;
 wire [0:2] w111;
 wire [0:2] w112;
 wire w113;
 wire [0:3] w114;
 wire [0:2] w115;
 wire w116;
 wire w117;
 wire w118;
 wire w119;
 wire [0:3] w120;
 wire [0:3] w121;
 wire w122;
 wire w123;
 wire w124;
 wire w125;
 wire [0:3] w126;
 wire [0:3] w127;
 assign v06e9b7 = w4;
 assign v2ff3d8 = w5;
 assign v3a1698 = w6;
 assign v59bc8e = w7;
 assign v67ba1a = w8;
 assign va2e0dd = w9;
 assign vc16043 = w13;
 assign v3fa45d = w14;
 assign v680eee = w15;
 assign v20f3ff = w16;
 assign v199360 = w17;
 assign v315fec = w18;
 assign w24 = vecd634;
 assign v654671 = w40;
 assign v0fda21 = w41;
 assign v337546 = w42;
 assign v7894cd = w43;
 assign w68 = vclk;
 assign w69 = vclk;
 assign w70 = vclk;
 assign w71 = vclk;
 assign w72 = vclk;
 assign w73 = vclk;
 assign w74 = vclk;
 assign w75 = vclk;
 assign w76 = vclk;
 assign w77 = vclk;
 assign w78 = vclk;
 assign w79 = vclk;
 assign w80 = vclk;
 assign w81 = vclk;
 assign w82 = vclk;
 assign w83 = vclk;
 assign w84 = vclk;
 assign w85 = vclk;
 assign w86 = vclk;
 assign w87 = vclk;
 assign w88 = vclk;
 assign w89 = vclk;
 assign w90 = vclk;
 assign w91 = vclk;
 assign w69 = w68;
 assign w70 = w68;
 assign w70 = w69;
 assign w71 = w68;
 assign w71 = w69;
 assign w71 = w70;
 assign w72 = w68;
 assign w72 = w69;
 assign w72 = w70;
 assign w72 = w71;
 assign w73 = w68;
 assign w73 = w69;
 assign w73 = w70;
 assign w73 = w71;
 assign w73 = w72;
 assign w74 = w68;
 assign w74 = w69;
 assign w74 = w70;
 assign w74 = w71;
 assign w74 = w72;
 assign w74 = w73;
 assign w75 = w68;
 assign w75 = w69;
 assign w75 = w70;
 assign w75 = w71;
 assign w75 = w72;
 assign w75 = w73;
 assign w75 = w74;
 assign w76 = w68;
 assign w76 = w69;
 assign w76 = w70;
 assign w76 = w71;
 assign w76 = w72;
 assign w76 = w73;
 assign w76 = w74;
 assign w76 = w75;
 assign w77 = w68;
 assign w77 = w69;
 assign w77 = w70;
 assign w77 = w71;
 assign w77 = w72;
 assign w77 = w73;
 assign w77 = w74;
 assign w77 = w75;
 assign w77 = w76;
 assign w78 = w68;
 assign w78 = w69;
 assign w78 = w70;
 assign w78 = w71;
 assign w78 = w72;
 assign w78 = w73;
 assign w78 = w74;
 assign w78 = w75;
 assign w78 = w76;
 assign w78 = w77;
 assign w79 = w68;
 assign w79 = w69;
 assign w79 = w70;
 assign w79 = w71;
 assign w79 = w72;
 assign w79 = w73;
 assign w79 = w74;
 assign w79 = w75;
 assign w79 = w76;
 assign w79 = w77;
 assign w79 = w78;
 assign w80 = w68;
 assign w80 = w69;
 assign w80 = w70;
 assign w80 = w71;
 assign w80 = w72;
 assign w80 = w73;
 assign w80 = w74;
 assign w80 = w75;
 assign w80 = w76;
 assign w80 = w77;
 assign w80 = w78;
 assign w80 = w79;
 assign w81 = w68;
 assign w81 = w69;
 assign w81 = w70;
 assign w81 = w71;
 assign w81 = w72;
 assign w81 = w73;
 assign w81 = w74;
 assign w81 = w75;
 assign w81 = w76;
 assign w81 = w77;
 assign w81 = w78;
 assign w81 = w79;
 assign w81 = w80;
 assign w82 = w68;
 assign w82 = w69;
 assign w82 = w70;
 assign w82 = w71;
 assign w82 = w72;
 assign w82 = w73;
 assign w82 = w74;
 assign w82 = w75;
 assign w82 = w76;
 assign w82 = w77;
 assign w82 = w78;
 assign w82 = w79;
 assign w82 = w80;
 assign w82 = w81;
 assign w83 = w68;
 assign w83 = w69;
 assign w83 = w70;
 assign w83 = w71;
 assign w83 = w72;
 assign w83 = w73;
 assign w83 = w74;
 assign w83 = w75;
 assign w83 = w76;
 assign w83 = w77;
 assign w83 = w78;
 assign w83 = w79;
 assign w83 = w80;
 assign w83 = w81;
 assign w83 = w82;
 assign w84 = w68;
 assign w84 = w69;
 assign w84 = w70;
 assign w84 = w71;
 assign w84 = w72;
 assign w84 = w73;
 assign w84 = w74;
 assign w84 = w75;
 assign w84 = w76;
 assign w84 = w77;
 assign w84 = w78;
 assign w84 = w79;
 assign w84 = w80;
 assign w84 = w81;
 assign w84 = w82;
 assign w84 = w83;
 assign w85 = w68;
 assign w85 = w69;
 assign w85 = w70;
 assign w85 = w71;
 assign w85 = w72;
 assign w85 = w73;
 assign w85 = w74;
 assign w85 = w75;
 assign w85 = w76;
 assign w85 = w77;
 assign w85 = w78;
 assign w85 = w79;
 assign w85 = w80;
 assign w85 = w81;
 assign w85 = w82;
 assign w85 = w83;
 assign w85 = w84;
 assign w86 = w68;
 assign w86 = w69;
 assign w86 = w70;
 assign w86 = w71;
 assign w86 = w72;
 assign w86 = w73;
 assign w86 = w74;
 assign w86 = w75;
 assign w86 = w76;
 assign w86 = w77;
 assign w86 = w78;
 assign w86 = w79;
 assign w86 = w80;
 assign w86 = w81;
 assign w86 = w82;
 assign w86 = w83;
 assign w86 = w84;
 assign w86 = w85;
 assign w87 = w68;
 assign w87 = w69;
 assign w87 = w70;
 assign w87 = w71;
 assign w87 = w72;
 assign w87 = w73;
 assign w87 = w74;
 assign w87 = w75;
 assign w87 = w76;
 assign w87 = w77;
 assign w87 = w78;
 assign w87 = w79;
 assign w87 = w80;
 assign w87 = w81;
 assign w87 = w82;
 assign w87 = w83;
 assign w87 = w84;
 assign w87 = w85;
 assign w87 = w86;
 assign w88 = w68;
 assign w88 = w69;
 assign w88 = w70;
 assign w88 = w71;
 assign w88 = w72;
 assign w88 = w73;
 assign w88 = w74;
 assign w88 = w75;
 assign w88 = w76;
 assign w88 = w77;
 assign w88 = w78;
 assign w88 = w79;
 assign w88 = w80;
 assign w88 = w81;
 assign w88 = w82;
 assign w88 = w83;
 assign w88 = w84;
 assign w88 = w85;
 assign w88 = w86;
 assign w88 = w87;
 assign w89 = w68;
 assign w89 = w69;
 assign w89 = w70;
 assign w89 = w71;
 assign w89 = w72;
 assign w89 = w73;
 assign w89 = w74;
 assign w89 = w75;
 assign w89 = w76;
 assign w89 = w77;
 assign w89 = w78;
 assign w89 = w79;
 assign w89 = w80;
 assign w89 = w81;
 assign w89 = w82;
 assign w89 = w83;
 assign w89 = w84;
 assign w89 = w85;
 assign w89 = w86;
 assign w89 = w87;
 assign w89 = w88;
 assign w90 = w68;
 assign w90 = w69;
 assign w90 = w70;
 assign w90 = w71;
 assign w90 = w72;
 assign w90 = w73;
 assign w90 = w74;
 assign w90 = w75;
 assign w90 = w76;
 assign w90 = w77;
 assign w90 = w78;
 assign w90 = w79;
 assign w90 = w80;
 assign w90 = w81;
 assign w90 = w82;
 assign w90 = w83;
 assign w90 = w84;
 assign w90 = w85;
 assign w90 = w86;
 assign w90 = w87;
 assign w90 = w88;
 assign w90 = w89;
 assign w91 = w68;
 assign w91 = w69;
 assign w91 = w70;
 assign w91 = w71;
 assign w91 = w72;
 assign w91 = w73;
 assign w91 = w74;
 assign w91 = w75;
 assign w91 = w76;
 assign w91 = w77;
 assign w91 = w78;
 assign w91 = w79;
 assign w91 = w80;
 assign w91 = w81;
 assign w91 = w82;
 assign w91 = w83;
 assign w91 = w84;
 assign w91 = w85;
 assign w91 = w86;
 assign w91 = w87;
 assign w91 = w88;
 assign w91 = w89;
 assign w91 = w90;
 assign w93 = w92;
 assign w95 = w94;
 assign w97 = w96;
 assign w98 = w96;
 assign w98 = w97;
 assign w99 = w96;
 assign w99 = w97;
 assign w99 = w98;
 assign w100 = w96;
 assign w100 = w97;
 assign w100 = w98;
 assign w100 = w99;
 assign w101 = w96;
 assign w101 = w97;
 assign w101 = w98;
 assign w101 = w99;
 assign w101 = w100;
 assign w102 = w96;
 assign w102 = w97;
 assign w102 = w98;
 assign w102 = w99;
 assign w102 = w100;
 assign w102 = w101;
 assign w103 = w96;
 assign w103 = w97;
 assign w103 = w98;
 assign w103 = w99;
 assign w103 = w100;
 assign w103 = w101;
 assign w103 = w102;
 vb717c8 v6d4411 (
  .vcc8c7c(w27),
  .v9e11d8(w92),
  .v7e15b2(w94),
  .v75197e(w96)
 );
 vb9ce14 va82d96 (
  .v6a1cbe(w24),
  .v2d03ef(w25),
  .v6a2ebd(w26),
  .v7114a9(w68)
 );
 v01f76a v9fcb7d (
  .va25221(w4),
  .v42d916(w5),
  .v258882(w6),
  .vc7d755(w7),
  .v8e5326(w8),
  .vf22350(w9),
  .vd94b05(w10),
  .vd720df(w11),
  .v62ce62(w69),
  .vded3a6(w107),
  .v9c96ea(w113)
 );
 vf05b5a #(
  .v16d6b8(p0)
 ) v6a713d (
  .v18e78c(w1),
  .v320bf6(w92)
 );
 vfa0a5e v5f4467 (
  .v41eb95(w70),
  .v565097(w96),
  .va632a5(w108),
  .vf892a0(w117)
 );
 vfa0a5e v491780 (
  .v41eb95(w71),
  .v565097(w97),
  .va632a5(w105),
  .vf892a0(w118)
 );
 vfa0a5e v06be19 (
  .v41eb95(w72),
  .v565097(w103),
  .vf892a0(w125),
  .va632a5(w127)
 );
 vfa0a5e vd3d6e9 (
  .v41eb95(w73),
  .v565097(w99),
  .va632a5(w110),
  .vf892a0(w116)
 );
 vfa0a5e v8c2d70 (
  .v41eb95(w74),
  .v565097(w102),
  .vf892a0(w122),
  .va632a5(w126)
 );
 vfa0a5e ve80146 (
  .v41eb95(w75),
  .v565097(w98),
  .va632a5(w114),
  .vf892a0(w119)
 );
 vfa0a5e v914d0d (
  .v41eb95(w76),
  .v565097(w100),
  .va632a5(w121),
  .vf892a0(w123)
 );
 vfa0a5e v853f0b (
  .v41eb95(w77),
  .v565097(w101),
  .va632a5(w120),
  .vf892a0(w124)
 );
 v9d1e02 vba1673 (
  .v27dec4(w1),
  .vdd3098(w94),
  .ve48246(w116),
  .vd53c9c(w117),
  .v8b3e73(w118),
  .v030ad0(w119)
 );
 vf05b5a #(
  .v16d6b8(p2)
 ) v85f66e (
  .v18e78c(w3),
  .v320bf6(w93)
 );
 v9d1e02 v02bbff (
  .v27dec4(w3),
  .vdd3098(w95),
  .ve48246(w122),
  .v8b3e73(w123),
  .vd53c9c(w124),
  .v030ad0(w125)
 );
 v0fa073 v263c78 (
  .v3f8943(w107),
  .v5ab9a6(w108),
  .vacdbb0(w111)
 );
 v0fa073 v66c62b (
  .v3f8943(w113),
  .v5ab9a6(w114),
  .vacdbb0(w115)
 );
 v2a562b #(
  .vb36a78(p12)
 ) va63429 (
  .vfde47f(w10),
  .v851180(w111)
 );
 v2a562b #(
  .vb36a78(p21)
 ) v35df5a (
  .vfde47f(w11),
  .v851180(w115)
 );
 v0fa073 v92e6cd (
  .v3f8943(w104),
  .v5ab9a6(w105),
  .vacdbb0(w106)
 );
 v0fa073 v2f167e (
  .v3f8943(w109),
  .v5ab9a6(w110),
  .vacdbb0(w112)
 );
 v01f76a v6b7d7d (
  .va25221(w13),
  .v42d916(w14),
  .v258882(w15),
  .vc7d755(w16),
  .v8e5326(w17),
  .vf22350(w18),
  .vd94b05(w19),
  .vd720df(w20),
  .v62ce62(w78),
  .vded3a6(w104),
  .v9c96ea(w109)
 );
 v2a562b #(
  .vb36a78(p23)
 ) v0208f3 (
  .vfde47f(w19),
  .v851180(w106)
 );
 v2a562b #(
  .vb36a78(p22)
 ) v4a89f2 (
  .vfde47f(w20),
  .v851180(w112)
 );
 v89d234 v37ee8e (
  .v39f831(w25),
  .vf892a0(w26),
  .vb1c024(w27),
  .v41eb95(w79)
 );
 vb0ff9e v6c9bab (
  .vb277aa(w29),
  .v521369(w36),
  .v52ffe5(w40),
  .vdd2008(w53),
  .v2d4dc0(w80)
 );
 vb0ff9e v915712 (
  .vb277aa(w31),
  .v521369(w37),
  .v52ffe5(w41),
  .vdd2008(w51),
  .v2d4dc0(w81)
 );
 vb0ff9e v56d098 (
  .vb277aa(w33),
  .v521369(w38),
  .v52ffe5(w42),
  .vdd2008(w55),
  .v2d4dc0(w82)
 );
 vb0ff9e v763215 (
  .vb277aa(w35),
  .v521369(w39),
  .v52ffe5(w43),
  .vdd2008(w48),
  .v2d4dc0(w83)
 );
 v370a9c #(
  .vb36a78(p44)
 ) vcb46ab (
  .vfde47f(w56),
  .v851180(w120)
 );
 v370a9c #(
  .vb36a78(p45)
 ) v05081e (
  .vfde47f(w63),
  .v851180(w127)
 );
 v370a9c #(
  .vb36a78(p46)
 ) v03316e (
  .vfde47f(w60),
  .v851180(w121)
 );
 v370a9c #(
  .vb36a78(p47)
 ) v4fd5a8 (
  .vfde47f(w66),
  .v851180(w126)
 );
 vebfed3 #(
  .vfb06ae(p28)
 ) ve30416 (
  .v2a8434(w29),
  .vac0eb2(w84)
 );
 vebfed3 #(
  .vfb06ae(p30)
 ) v99fbd5 (
  .v2a8434(w31),
  .vac0eb2(w85)
 );
 vebfed3 #(
  .vfb06ae(p32)
 ) va3ad61 (
  .v2a8434(w33),
  .vac0eb2(w86)
 );
 vebfed3 #(
  .vfb06ae(p34)
 ) vd0712c (
  .v2a8434(w35),
  .vac0eb2(w87)
 );
 v725b7e vf14d0c (
  .v9fb85f(w36)
 );
 v725b7e va10650 (
  .v9fb85f(w37)
 );
 v725b7e v1e23de (
  .v9fb85f(w38)
 );
 v725b7e v902008 (
  .v9fb85f(w39)
 );
 v7d7474 #(
  .v8d305c(p49)
 ) v096197 (
  .v9c083a(w48),
  .ve41da3(w67)
 );
 v7d7474 #(
  .v8d305c(p50)
 ) v77dbc7 (
  .v9c083a(w51),
  .ve41da3(w64)
 );
 v7d7474 #(
  .v8d305c(p52)
 ) vf7d37b (
  .v9c083a(w53),
  .ve41da3(w57)
 );
 v7d7474 #(
  .v8d305c(p54)
 ) ve459dc (
  .v9c083a(w55),
  .ve41da3(w61)
 );
 vc97936 #(
  .v89e8bb(p58)
 ) v628929 (
  .vcf84db(w56),
  .v61ff7b(w57),
  .v6dda25(w88)
 );
 vc97936 #(
  .v89e8bb(p59)
 ) vaeb11f (
  .vcf84db(w60),
  .v61ff7b(w61),
  .v6dda25(w89)
 );
 vc97936 #(
  .v89e8bb(p62)
 ) v1512e6 (
  .vcf84db(w63),
  .v61ff7b(w64),
  .v6dda25(w90)
 );
 vc97936 #(
  .v89e8bb(p65)
 ) vdec873 (
  .vcf84db(w66),
  .v61ff7b(w67),
  .v6dda25(w91)
 );
 assign vinit = 8'b00000000;
endmodule

//---------------------------------------------------
//-- Protocol V1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Extract information from the given byte following the communication format
//---------------------------------------------------
//---- Top entity
module vb717c8 (
 input [7:0] vcc8c7c,
 output [1:0] v9e11d8,
 output [1:0] v7e15b2,
 output [3:0] v75197e
);
 wire [0:7] w0;
 wire [0:1] w1;
 wire [0:1] w2;
 wire [0:3] w3;
 assign w0 = vcc8c7c;
 assign v9e11d8 = w1;
 assign v7e15b2 = w2;
 assign v75197e = w3;
 vb717c8_v9a2a06 v9a2a06 (
  .i(w0),
  .m(w1),
  .id(w2),
  .val(w3)
 );
endmodule

//---------------------------------------------------
//-- Protocol Splitter
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Convert input byte to protocol params
//---------------------------------------------------

module vb717c8_v9a2a06 (
 input [7:0] i,
 output [1:0] m,
 output [1:0] id,
 output [3:0] val
);
 assign m = i[7:6];
 assign id = i[5:4];
 assign val = i[3:0];
endmodule
//---- Top entity
module vb9ce14 #(
 parameter v47d474 = 115200
) (
 input v7114a9,
 input v6a1cbe,
 output [7:0] v2d03ef,
 output ve77bd8,
 output v6a2ebd
);
 localparam p4 = v47d474;
 wire w0;
 wire w1;
 wire [0:7] w2;
 wire w3;
 wire w5;
 assign w0 = v7114a9;
 assign w1 = v6a1cbe;
 assign v2d03ef = w2;
 assign v6a2ebd = w3;
 assign ve77bd8 = w5;
 vb9ce14_vf55761 #(
  .BAUD(p4)
 ) vf55761 (
  .clk(w0),
  .RX(w1),
  .data(w2),
  .rcv(w3),
  .busy(w5)
 );
endmodule

//---------------------------------------------------
//-- Serial-rx
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Receptor serie asíncrono. Velocidad por defecto: 115200 baudios
//---------------------------------------------------

module vb9ce14_vf55761 #(
 parameter BAUD = 0
) (
 input clk,
 input RX,
 output [7:0] data,
 output busy,
 output rcv
);
 //-- Constantes para obtener las velocidades estándares
 `define B115200 104 
 `define B57600  208
 `define B38400  313
 `define B19200  625
 `define B9600   1250
 `define B4800   2500
 `define B2400   5000
 `define B1200   10000
 `define B600    20000
 `define B300    40000
 
 //-- Constante para calcular los baudios
 localparam BAUDRATE = (BAUD==115200) ? `B115200 : //-- OK
                       (BAUD==57600)  ? `B57600  : //-- OK
                       (BAUD==38400)  ? `B38400  : //-- Ok
                       (BAUD==19200)  ? `B19200  : //-- OK
                       (BAUD==9600)   ? `B9600   : //-- OK
                       (BAUD==4800)   ? `B4800   : //-- OK 
                       (BAUD==2400)   ? `B2400   : //-- OK
                       (BAUD==1200)   ? `B1200   : //-- OK
                       (BAUD==600)    ? `B600    : //-- OK
                       (BAUD==300)    ? `B300    : //-- OK
                       `B115200 ;  //-- Por defecto 115200 baudios
 
 
 
 
 //-- Calcular el numero de bits para almacenar el divisor
 localparam N = $clog2(BAUDRATE);
 
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d1;
 reg din;
 
 always @(posedge clk)
  d1 <= RX;
  
 //-- Din contiene el dato serie de entrada listo para usarse   
 always @(posedge clk)
   din <= d1;
   
 //------ Detectar el bit de start: flanco de bajada en din
 
 //-- Registro temporal
 reg q_t0 = 0;
 
 always @(posedge clk)
   q_t0 <= din;
   
 //-- El cable din_fe es un "tic" que aparece cuando llega el flanco de 
 //-- bajada
 wire din_fe = (q_t0 & ~din);
 
 //-------- ESTADO DEL RECEPTOR
 
 //-- 0: Apagado. Esperando
 //-- 1: Encendido. Activo. Recibiendo dato
 reg state = 0;
 
 always @(posedge clk)
   //-- Se pasa al estado activo al detectar el flanco de bajada
   //-- del bit de start
   if (din_fe)
     state <= 1'b1;
     
   //-- Se pasa al estado inactivo al detectar la señal rst_state    
   else if (rst_state)
     state<=1'b0;
 
 //------------------ GENERADOR DE BAUDIOS -----------------------------
 //-- Se activa cuando el receptor está encendido
 
 
 //-- Calcular la mitad del divisor BAUDRATE/2
 localparam BAUD2 = (BAUDRATE >> 1);
 
 //-- Contador del sistema, para esperar un tiempo de  
 //-- medio bit (BAUD2)
 
 //-- NOTA: podria tener N-2 bits en principio
 reg [N-1: 0] div2counter = 0;
 
 //-- Se genera primero un retraso de BAUD/2
 //-- El proceso comienza cuando el estado pasa a 1
 
 always @(posedge clk)
 
   //-- Contar
   if (state) begin
     //-- Solo cuenta hasta BAUD2, luego  
     //-- se queda en ese valor hasta que
     //-- ena se desactiva
     if (div2counter < BAUD2) 
       div2counter <= div2counter + 1;
   end else
     div2counter <= 0;
 
 //-- Habilitar el generador de baudios principal
 //-- cuando termine este primer contador
 wire ena2 = (div2counter == BAUD2);
 
 
 //------ GENERADOR DE BAUDIOS PRINCIPAL
 
 //-- Contador para implementar el divisor
 //-- Es un contador modulo BAUDRATE
 reg [N-1:0] divcounter = 0;
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Esta señal contiene el tic
 wire ov = (divcounter == BAUDRATE-1);
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = ov | (ena2 == 0);
 
 //-- El cable con el tic para capturar cada bit lo llamamos
 //-- bit_tic, y es la señal de overflow del contador
 wire bit_tic = ov;
 
 //-------- REGISTRO DE DESPLAZAMIENTO -----------
 //-- Es el componente que pasa los bits recibidos a paralelo
 //-- La señal de desplazamiento usada es bit_tic, pero sólo cuando  
 //-- estamos en estado de encendido (state==1)
 //-- Es un registro de 9 bits: 8 bits de datos + bit de stop
 //-- El bit de start no se almacena, es el que ha servido para
 //-- arrancar el receptor
 
 reg [8:0] sr = 0;
 
 always @(posedge clk)
   //-- Se captura el bit cuando llega y el receptor
   //-- esta activado
   if (bit_tic & state)
     sr <= {din, sr[8:1]};
     
 //-- El dato recibido se encuentran en los 8 bits menos significativos
 //-- una vez recibidos los 9 bits
 
 //-------- CONTADOR de bits recibidos
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [4:0] cont = 0;
 
 always @(posedge clk)
 
   //-- El contador se pone a 0 si hay un overflow o 
   //-- el receptor está apagado 
   if ((state==0)| ov2)
     cont <= 0;
   else
     //-- Receptor activado: Si llega un bit se incrementa
     if (bit_tic)
       cont <= cont + 1;
       
 //-- Comprobar overflow
 wire ov2 = (cont == 9);
     
 //-- Esta señal de overflow indica el final de la recepción
 wire fin = ov2;
 
 //-- Se conecta al reset el biestable de estado
 wire rst_state = fin;
 
 //----- REGISTRO DE DATOS -------------------
 //-- Registro de 8 bits que almacena el dato final
 
 //-- Bus de salida con el dato recibido
 reg data = 0;
 
 always @(posedge clk)
 
   //-- Si se ha recibido el ultimo bit, capturamos el dato
   //-- que se encuentra en los 8 bits de menor peso del
   //-- registro de desplazamiento
   if (fin)
     data <= sr[7:0];
 
 //-- Comunicar que se ha recibido un dato
 //-- Tic de dato recibido
 reg rcv = 0;
 always @(posedge clk)
   rcv <= fin;
 
 //-- La señal de busy es directamente el estado del receptor
 assign busy = state;
 
 
endmodule
//---- Top entity
module v01f76a #(
 parameter vcb6012 = 100
) (
 input v62ce62,
 input [7:0] vd94b05,
 input [7:0] vd720df,
 input vded3a6,
 input v9c96ea,
 output va25221,
 output v42d916,
 output v258882,
 output vc7d755,
 output v8e5326,
 output vf22350
);
 localparam p9 = vcb6012;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire [0:7] w6;
 wire w7;
 wire w8;
 wire w10;
 wire [0:7] w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 assign vc7d755 = w0;
 assign w1 = vded3a6;
 assign v258882 = w2;
 assign w2 = vded3a6;
 assign vf22350 = w3;
 assign w4 = v9c96ea;
 assign w5 = v9c96ea;
 assign v8e5326 = w5;
 assign w6 = vd94b05;
 assign va25221 = w7;
 assign w11 = vd720df;
 assign v42d916 = w12;
 assign w13 = v62ce62;
 assign w14 = v62ce62;
 assign w15 = v62ce62;
 assign w2 = w1;
 assign w5 = w4;
 assign w10 = w8;
 assign w14 = w13;
 assign w15 = w13;
 assign w15 = w14;
 v3676a0 v97019e (
  .vcbab45(w0),
  .v0e28cb(w1)
 );
 v3676a0 v0b42df (
  .vcbab45(w3),
  .v0e28cb(w4)
 );
 v6b9ecc v83319c (
  .v676bcb(w6),
  .vdec06b(w7),
  .vc03fca(w8),
  .v8d0ca6(w13)
 );
 v0e64bc #(
  .v207e0d(p9)
 ) ve1ab87 (
  .v8337bc(w8),
  .v531e20(w14)
 );
 v6b9ecc vfd10af (
  .vc03fca(w10),
  .v676bcb(w11),
  .vdec06b(w12),
  .v8d0ca6(w15)
 );
endmodule

//---------------------------------------------------
//-- pwm-2bits CLONE
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Señal pwm de 2 bits (4 niveles)
//---------------------------------------------------
//---- Top entity
module v3676a0 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v3676a0_vd54ca1 vd54ca1 (
  .a(w0),
  .q(w1)
 );
endmodule

//---------------------------------------------------
//-- NOT
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- NOT gate (Verilog implementation)
//---------------------------------------------------

module v3676a0_vd54ca1 (
 input a,
 output q
);
 //-- NOT Gate
 assign q = ~a;
 
 
endmodule
//---- Top entity
module v6b9ecc #(
 parameter v103dea = 0
) (
 input v8d0ca6,
 input [7:0] v676bcb,
 input vc03fca,
 output vdec06b
);
 localparam p3 = v103dea;
 wire w0;
 wire w1;
 wire w2;
 wire [0:7] w4;
 assign w0 = v8d0ca6;
 assign w1 = vc03fca;
 assign vdec06b = w2;
 assign w4 = v676bcb;
 v6b9ecc_vfd72d5 #(
  .P(p3)
 ) vfd72d5 (
  .clk(w0),
  .write(w1),
  .pwm(w2),
  .w(w4)
 );
endmodule

//---------------------------------------------------
//-- pwm-8bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Señal pwm de 8 bits (256 niveles)
//---------------------------------------------------

module v6b9ecc_vfd72d5 #(
 parameter P = 0
) (
 input clk,
 input [7:0] w,
 input write,
 output pwm
);
 //-- Parámetro P: Número de bits del prescaler
 //-- (P = 0 para no usar prescaler)
 
 //-- Bits para el nivel
 localparam N = 8;
 
 //-- Contador principal
 //-- Tamaño: Bits anchura + Prescaler (P)
 localparam C = N + P;
 
 reg [C-1:0] counter = 0;
 always @(posedge clk)
   counter <= counter + 1;
 
 //-- Detectar el comienzo de un ciclo nuevo:
 //-- cuando hay un flanco de bajada en el bit de  
 //-- mayor peso (C-1)
 
 reg q = 0;
 always @(posedge clk)
   q <= counter[C-1];
  
 //-- Cuando cycle_begin es 1, indica que comienza
 //-- un nuevo ciclo
 wire cycle_begin = q & ~counter[C-1];
   
 //-- Registro W: Almacena la anchura actual
 reg [N-1:0] reg_w = 0;
 
 always @(posedge clk)
   //-- Se carga en cada nuevo ciclo de pwm
   if (cycle_begin)
     reg_w <= reg_buf;
 
 //-- Registro buffer. Es donde se almacena la anchura
 //-- introducida por el usuario mientras llega un  
 //-- nuevo ciclo de pwm, y se pueda cargar en el  
 //-- registro w
 reg [N-1:0] reg_buf = 0;
 
 always @(posedge clk)
   //-- Se actualiza cuando llega un dato nuevo
   if (write)
     reg_buf <= w;
 
 //-- Salida del pwm: comparador
 wire pwm_t = (counter[C-1:C-N] < w);
 
 reg pwm = 0;
 //-- Registrar la salida del pwm
 always @(posedge clk)
   pwm <= pwm_t;
 
 
endmodule
//---- Top entity
module v0e64bc #(
 parameter v207e0d = 1
) (
 input v531e20,
 output v8337bc
);
 localparam p2 = v207e0d;
 wire w0;
 wire w1;
 assign v8337bc = w0;
 assign w1 = v531e20;
 v0e64bc_v94c6d7 #(
  .HZ(p2)
 ) v94c6d7 (
  .clk_o(w0),
  .clk(w1)
 );
endmodule

//---------------------------------------------------
//-- Corazon_Hz
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)
//---------------------------------------------------

module v0e64bc_v94c6d7 #(
 parameter HZ = 0
) (
 input clk,
 output clk_o
);
 
 //parameter HZ=1;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000/HZ;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 //-- Temporal clock
 reg clk_t = 0;
 
 //-- Se usa un contador modulo M/2 para luego
 //-- pasarlo por un biestable T y dividir la frecuencia
 //-- entre 2, para que el ciclo de trabajo sea del 50%
 always @(posedge clk)
     if (divcounter == M/2) begin
       clk_t <= 1;
       divcounter = 0;
     end 
     else begin
       divcounter <=  divcounter + 1;
       clk_t = 0;
     end 
   
 reg clk_o = 0;  
     
 //-- Biestable T para obtener ciclo de trabajo del 50%
 always @(posedge clk)
   if (clk_t)
     clk_o <= ~clk_o;
 
endmodule
//---- Top entity
module vf05b5a #(
 parameter v16d6b8 = 0
) (
 input [1:0] v320bf6,
 output v18e78c
);
 localparam p1 = v16d6b8;
 wire w0;
 wire [0:1] w2;
 assign v18e78c = w0;
 assign w2 = v320bf6;
 vf05b5a_vd75681 #(
  .B(p1)
 ) vd75681 (
  .eq(w0),
  .a(w2)
 );
endmodule

//---------------------------------------------------
//-- Igual-1-op
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comparador de igualdad, de un operando de 2 bits
//---------------------------------------------------

module vf05b5a_vd75681 #(
 parameter B = 0
) (
 input [1:0] a,
 output eq
);
 assign eq = (a == B);
endmodule
//---- Top entity
module vfa0a5e #(
 parameter v422d28 = 0
) (
 input v41eb95,
 input [3:0] v565097,
 input vf892a0,
 output [3:0] va632a5
);
 localparam p0 = v422d28;
 wire w1;
 wire w2;
 wire [0:3] w3;
 wire [0:3] w4;
 assign w1 = vf892a0;
 assign w2 = v41eb95;
 assign w3 = v565097;
 assign va632a5 = w4;
 vfa0a5e_v9148cb #(
  .INI(p0)
 ) v9148cb (
  .load(w1),
  .clk(w2),
  .d(w3),
  .q(w4)
 );
endmodule

//---------------------------------------------------
//-- Registro
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Registro de 4 bits
//---------------------------------------------------

module vfa0a5e_v9148cb #(
 parameter INI = 0
) (
 input clk,
 input [3:0] d,
 input load,
 output [3:0] q
);
 localparam N = 4;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
endmodule
//---- Top entity
module v9d1e02 (
 input v27dec4,
 input [1:0] vdd3098,
 output ve48246,
 output v8b3e73,
 output v030ad0,
 output vd53c9c
);
 wire [0:1] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign w0 = vdd3098;
 assign ve48246 = w2;
 assign v8b3e73 = w3;
 assign v030ad0 = w4;
 assign vd53c9c = w5;
 assign w9 = v27dec4;
 assign w8 = w7;
 v6307bd v1f4fa3 (
  .v27dec4(w1),
  .v030ad0(w2),
  .vd53c9c(w3),
  .vb192d0(w7)
 );
 v6307bd vaaa5ae (
  .v030ad0(w1),
  .vd53c9c(w6),
  .v27dec4(w9),
  .vb192d0(w10)
 );
 v0dbcb9 v3f8f83 (
  .v8b19dd(w0),
  .v64d863(w7),
  .v3f8943(w10)
 );
 v6307bd va8aa75 (
  .v030ad0(w4),
  .vd53c9c(w5),
  .v27dec4(w6),
  .vb192d0(w8)
 );
endmodule

//---------------------------------------------------
//-- DeMux-1-4
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 1-to-4 DeMultplexer (1-bit channels)
//---------------------------------------------------
//---- Top entity
module v6307bd (
 input v27dec4,
 input vb192d0,
 output v030ad0,
 output vd53c9c
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign v030ad0 = w0;
 assign vd53c9c = w1;
 assign w3 = v27dec4;
 assign w4 = v27dec4;
 assign w5 = vb192d0;
 assign w6 = vb192d0;
 assign w4 = w3;
 assign w6 = w5;
 vba518e vb523bf (
  .vcbab45(w0),
  .v0e28cb(w3),
  .v3ca442(w6)
 );
 v3676a0 vde5c93 (
  .vcbab45(w2),
  .v0e28cb(w5)
 );
 vba518e vf65161 (
  .vcbab45(w1),
  .v3ca442(w2),
  .v0e28cb(w4)
 );
endmodule

//---------------------------------------------------
//-- DeMux-1-2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 1-to-2 DeMultplexer (1-bit channels)
//---------------------------------------------------
//---- Top entity
module vba518e (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vba518e_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- AND2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Two bits input And gate
//---------------------------------------------------

module vba518e_vf4938a (
 input a,
 input b,
 output c
);
 //-- AND gate
 //-- Verilog implementation
 
 assign c = a & b;
 
endmodule
//---- Top entity
module v0dbcb9 (
 input [1:0] v8b19dd,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire [0:1] w2;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign w2 = v8b19dd;
 v0dbcb9_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus2-Split-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus2-Split-all: Split the 2-bits bus into two wires
//---------------------------------------------------

module v0dbcb9_v9a2a06 (
 input [1:0] i,
 output o1,
 output o0
);
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module v0fa073 (
 input [3:0] v5ab9a6,
 output v3f8943,
 output [2:0] vacdbb0
);
 wire w0;
 wire [0:2] w1;
 wire [0:3] w2;
 assign v3f8943 = w0;
 assign vacdbb0 = w1;
 assign w2 = v5ab9a6;
 v0fa073_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus4-Split-1-3
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus4-Split-1-3: Split the 4-bits bus into two: 1-bit and 3-bits buses
//---------------------------------------------------

module v0fa073_v9a2a06 (
 input [3:0] i,
 output o1,
 output [2:0] o0
);
 assign o1 = i[3];
 assign o0 = i[2:0];
endmodule
//---- Top entity
module v2a562b #(
 parameter vb36a78 = "vb36a78.list"
) (
 input [2:0] v851180,
 output [7:0] vfde47f
);
 localparam p0 = vb36a78;
 wire [0:2] w1;
 wire [0:7] w2;
 assign w1 = v851180;
 assign vfde47f = w2;
 v2a562b_v361fe9 #(
  .DATA(p0)
 ) v361fe9 (
  .i(w1),
  .q(w2)
 );
endmodule

//---------------------------------------------------
//-- mi-tabla3-8
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Circuito combinacional de 3 entradas y 8 salidas
//---------------------------------------------------

module v2a562b_v361fe9 #(
 parameter DATA = 0
) (
 input [2:0] i,
 output [7:0] q
);
 
 //-- Bits del bus de entrada
 localparam N = 3;
 
 //-- Bits del bus de salida
 localparam M = 8;
 
 //-- Calcular tamaño de la tabla
 //-- (filas) segun los bits de entrada
 localparam TAM = 2 ** N;
 
 //-- Definición de la tabla
 //-- Tabla de TAM elementos de M bits
 reg [M-1:0] tabla[0:TAM-1];
 
 //-- Read the table
 assign q = tabla[i];
 
 //-- Init table from DATA parameters
 initial begin
   if (DATA) $readmemb(DATA, tabla);
 end
endmodule
//---- Top entity
module v89d234 #(
 parameter v422d28 = 0
) (
 input v41eb95,
 input [7:0] v39f831,
 input vf892a0,
 output [7:0] vb1c024
);
 localparam p0 = v422d28;
 wire [0:7] w1;
 wire [0:7] w2;
 wire w3;
 wire w4;
 assign vb1c024 = w1;
 assign w2 = v39f831;
 assign w3 = vf892a0;
 assign w4 = v41eb95;
 v89d234_v9148cb #(
  .INI(p0)
 ) v9148cb (
  .q(w1),
  .d(w2),
  .load(w3),
  .clk(w4)
 );
endmodule

//---------------------------------------------------
//-- Registro
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Registro de 8 bits
//---------------------------------------------------

module v89d234_v9148cb #(
 parameter INI = 0
) (
 input clk,
 input [7:0] d,
 input load,
 output [7:0] q
);
 localparam N = 8;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
endmodule
//---- Top entity
module vb0ff9e #(
 parameter v1b27a8 = 20
) (
 input v2d4dc0,
 input [7:0] vdd2008,
 input vb277aa,
 input v521369,
 output v52ffe5
);
 localparam p5 = v1b27a8;
 wire w0;
 wire w1;
 wire w2;
 wire [0:7] w3;
 wire w4;
 assign v52ffe5 = w0;
 assign w1 = v521369;
 assign w2 = vb277aa;
 assign w3 = vdd2008;
 assign w4 = v2d4dc0;
 vb0ff9e_v3a816b #(
  .MS(p5)
 ) v3a816b (
  .pwm(w0),
  .ena(w1),
  .write(w2),
  .pos(w3),
  .clk(w4)
 );
endmodule

//---------------------------------------------------
//-- ServoPWM-8bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Controlador de servos, de 8 bits. El periodo del PWM por defecto es de 20ms (Futaba 3003)
//---------------------------------------------------

module vb0ff9e_v3a816b #(
 parameter MS = 0
) (
 input clk,
 input [7:0] pos,
 input write,
 input ena,
 output pwm
);
 //--- Registro de posición
 
 reg [7:0] pos_r = 140;
 
 always @(posedge clk)
   if (write)
     pos_r <= pos;
     
     
 //-- Registro de estado
 
 reg state = 0;
 
 always @(posedge clk)
     state <= ena;
     
 //------------------- Temporizador en unidades de 10us
 
 //--------- Biestable de estado
 
 reg state2 = 0;
 
 wire rst;
 
 always @(posedge clk)
   if (period)
     state2 <= 1'b1;
   else if (fin)
     state2<=1'b0;
     
     
 //------- Registro de espera
 reg [7:0] delay_r = 0;
 
 always @(posedge clk)
   if (load)
     delay_r <= pos_r;
     
 //--- Carga del registro de espera en el arranque
 reg q0 = 0;
 
 always @(posedge clk)
   q0 <= state2;
   
 wire load = (~q0 & state2);  
 
 //-- La señal de busy es el estado
 wire busy = state2;
 
 //------------------------------ Corazon de micro-segundos
 
 localparam US = 10;
 
 //-- Constante para dividir y obtener una frec. de 1Mhz
 localparam M = 12*US;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 wire ov = (divcounter == M-1);
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = ov | (state2 == 0);
 
 //-- La salida es la señal de overflow
 wire heart_usec_o = ov;
 
 //------------------- Contador de tiempo (unidades de 10-usec)
 
 reg [7:0] tiempo = 0;
 
 always @(posedge clk)
   if (!state2)
     tiempo <= 0;
   else
     if (heart_usec_o)
       tiempo <= tiempo + 1;
       
 //------------- Comparador
 
 //-- Cuando se alcanza el tiempo se emite la señal de fin
 wire fin = (delay_r == tiempo);
 
 
 //--------------------- Generador del periodo
 
 //-- Constante para dividir y obtener una frecuencia de 1KHz
 localparam M2 = 12000*MS;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N2 = $clog2(M2);
 
 //-- Cable de reset para el contador
 wire reset2;
 
 //-- Registro del divisor
 reg [N2-1:0] divcounter2;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset2)
     divcounter2 <= 0;
   else
     divcounter2 <= divcounter2 + 1;
 
 wire ov2 = (divcounter2 == M2-1);
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset2 = ov2 | (state == 0);
 
 //-- La salida es la señal de overflow
 wire period = ov2;
 
 //----------- Biestable final de salida
 reg q3 = 0;
 always @(posedge clk)
   q3 <= busy;
 
 assign pwm = q3;
 
 
 
 
endmodule
//---- Top entity
module v370a9c #(
 parameter vb36a78 = "vb36a78.list"
) (
 input [3:0] v851180,
 output [7:0] vfde47f
);
 localparam p0 = vb36a78;
 wire [0:3] w1;
 wire [0:7] w2;
 assign w1 = v851180;
 assign vfde47f = w2;
 v370a9c_v361fe9 #(
  .DATA(p0)
 ) v361fe9 (
  .i(w1),
  .q(w2)
 );
endmodule

//---------------------------------------------------
//-- mi-tabla4-8
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Circuito combinacional de 4 entradas y 8 salidas
//---------------------------------------------------

module v370a9c_v361fe9 #(
 parameter DATA = 0
) (
 input [3:0] i,
 output [7:0] q
);
 
 //-- Bits del bus de entrada
 localparam N = 4;
 
 //-- Bits del bus de salida
 localparam M = 8;
 
 //-- Calcular tamaño de la tabla
 //-- (filas) segun los bits de entrada
 localparam TAM = 2 ** N;
 
 //-- Definición de la tabla
 //-- Tabla de TAM elementos de M bits
 reg [M-1:0] tabla[0:TAM-1];
 
 //-- Read the table
 assign q = tabla[i];
 
 //-- Init table from DATA parameters
 initial begin
   if (DATA) $readmemb(DATA, tabla);
 end
endmodule
//---- Top entity
module vebfed3 #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 vebfed3_v6cac2f #(
  .HZ(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

//---------------------------------------------------
//-- Corazon-tic-Hz
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Corazón de bombeo de tics a un frecuencia parametrica en Hz
//---------------------------------------------------

module vebfed3_v6cac2f #(
 parameter HZ = 0
) (
 input clk,
 output o
);
 //localparam HZ;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000/HZ;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule
//---- Top entity
module v725b7e (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v725b7e_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

//---------------------------------------------------
//-- 1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Un bit constante a 1
//---------------------------------------------------

module v725b7e_vb2eccd (
 output q
);
 //-- Bit constante a 1
 assign q = 1'b1;
 
 
endmodule
//---- Top entity
module v7d7474 #(
 parameter v8d305c = 1
) (
 input [7:0] ve41da3,
 output [7:0] v9c083a
);
 localparam p0 = v8d305c;
 wire [0:7] w1;
 wire [0:7] w2;
 assign w1 = ve41da3;
 assign v9c083a = w2;
 v7d7474_va0c26a #(
  .k(p0)
 ) va0c26a (
  .a(w1),
  .s(w2)
 );
endmodule

//---------------------------------------------------
//-- sum-1op-8bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Sumador de un operando de 8 bits con una constante pasada como parámetro (No hay accarreo)
//---------------------------------------------------

module v7d7474_va0c26a #(
 parameter k = 0
) (
 input [7:0] a,
 output [7:0] s
);
 assign s = a + k;
endmodule
//---- Top entity
module vc97936 #(
 parameter v89e8bb = 90,
 parameter v03dea2 = 1,
 parameter vfbbd89 = -1
) (
 input v6dda25,
 input [7:0] vcf84db,
 output [7:0] v61ff7b
);
 localparam p1 = v03dea2;
 localparam p2 = vfbbd89;
 localparam p6 = v89e8bb;
 wire w0;
 wire [0:7] w3;
 wire [0:7] w4;
 wire w5;
 wire w7;
 wire w8;
 wire [0:7] w9;
 wire [0:7] w10;
 wire [0:7] w11;
 wire [0:7] w12;
 wire [0:7] w13;
 wire [0:7] w14;
 wire w15;
 wire [0:7] w16;
 wire [0:7] w17;
 wire w18;
 wire w19;
 assign w7 = v6dda25;
 assign w8 = v6dda25;
 assign v61ff7b = w10;
 assign w16 = vcf84db;
 assign w17 = vcf84db;
 assign w8 = w7;
 assign w11 = w10;
 assign w12 = w10;
 assign w12 = w11;
 assign w13 = w10;
 assign w13 = w11;
 assign w13 = w12;
 assign w14 = w10;
 assign w14 = w11;
 assign w14 = w12;
 assign w14 = w13;
 assign w17 = w16;
 v89d234 v455ab4 (
  .v41eb95(w7),
  .v39f831(w9),
  .vb1c024(w10),
  .vf892a0(w15)
 );
 v7ebc90 v5f44bb (
  .v0e28cb(w0),
  .v3ca442(w5),
  .vcbab45(w15)
 );
 v96f098 vf465b0 (
  .vcbab45(w0),
  .v0e28cb(w18)
 );
 va21ae0 v65c988 (
  .v4145bb(w11),
  .v40cb98(w16),
  .v18e78c(w18)
 );
 v27fd6d v5e77db (
  .v9892c7(w12),
  .v9f69ad(w17),
  .v18e78c(w19)
 );
 v3d690a #(
  .vd73390(p1)
 ) v20f95c (
  .v57e596(w3),
  .v72c766(w13)
 );
 v3d690a #(
  .vd73390(p2)
 ) v5db5d8 (
  .v57e596(w4),
  .v72c766(w14)
 );
 v359a55 v31f71b (
  .v02d898(w3),
  .vd6b984(w4),
  .vf24dba(w9),
  .v50d6c6(w19)
 );
 vebfed3 #(
  .vfb06ae(p6)
 ) v07e838 (
  .v2a8434(w5),
  .vac0eb2(w8)
 );
endmodule

//---------------------------------------------------
//-- SmoothServo
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Smooth control of a servo with a given servo speed
//---------------------------------------------------
//---- Top entity
module v7ebc90 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v7ebc90_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- AND
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- AND logic gate
//---------------------------------------------------

module v7ebc90_vf4938a (
 input a,
 input b,
 output c
);
 // AND logic gate
 
 assign c = a & b;
endmodule
//---- Top entity
module v96f098 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v96f098_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

//---------------------------------------------------
//-- NOT
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- NOT logic gate
//---------------------------------------------------

module v96f098_vd54ca1 (
 input a,
 output c
);
 // NOT logic gate
 
 assign c = ~ a;
endmodule
//---- Top entity
module va21ae0 (
 input [7:0] v4145bb,
 input [7:0] v40cb98,
 output v18e78c
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 assign v18e78c = w0;
 assign w1 = v40cb98;
 assign w2 = v4145bb;
 va21ae0_vd75681 vd75681 (
  .eq(w0),
  .b(w1),
  .a(w2)
 );
endmodule

//---------------------------------------------------
//-- Comparador de dos operandos
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comparador de dos operandos de 8 bits
//---------------------------------------------------

module va21ae0_vd75681 (
 input [7:0] a,
 input [7:0] b,
 output eq
);
 assign eq = (a == b);
endmodule
//---- Top entity
module v27fd6d (
 input [7:0] v9892c7,
 input [7:0] v9f69ad,
 output v18e78c
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 assign v18e78c = w0;
 assign w1 = v9f69ad;
 assign w2 = v9892c7;
 v27fd6d_vd75681 vd75681 (
  .eq(w0),
  .b(w1),
  .a(w2)
 );
endmodule

//---------------------------------------------------
//-- Menor-que-2-op
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comparador menor que, de dos operandos de 8 bits
//---------------------------------------------------

module v27fd6d_vd75681 (
 input [7:0] a,
 input [7:0] b,
 output eq
);
 assign eq = (a < b);
endmodule
//---- Top entity
module v3d690a #(
 parameter vd73390 = 0
) (
 input [7:0] v72c766,
 output v4642b6,
 output [7:0] v57e596
);
 localparam p1 = vd73390;
 wire w0;
 wire [0:7] w2;
 wire [0:7] w3;
 wire [0:7] w4;
 assign v4642b6 = w0;
 assign w3 = v72c766;
 assign v57e596 = w4;
 vffc517 #(
  .vc5c8ea(p1)
 ) vf87ca4 (
  .va0aeac(w2)
 );
 vcb23aa v7b0e5e (
  .v4642b6(w0),
  .v39966a(w2),
  .veb2f59(w3),
  .v62bf25(w4)
 );
endmodule

//---------------------------------------------------
//-- AdderK-8bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- AdderK-8bit: Adder of 8-bit operand and 8-bit constant
//---------------------------------------------------
//---- Top entity
module vffc517 #(
 parameter vc5c8ea = 0
) (
 output [7:0] va0aeac
);
 localparam p0 = vc5c8ea;
 wire [0:7] w1;
 assign va0aeac = w1;
 vffc517_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

//---------------------------------------------------
//-- 8-bits-gen-constant
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic: 8-bits generic constant (0-255)
//---------------------------------------------------

module vffc517_v465065 #(
 parameter VALUE = 0
) (
 output [7:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module vcb23aa (
 input [7:0] v39966a,
 input [7:0] veb2f59,
 output v4642b6,
 output [7:0] v62bf25
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire [0:3] w7;
 wire [0:3] w8;
 wire [0:3] w9;
 wire [0:3] w10;
 assign w0 = veb2f59;
 assign w1 = v39966a;
 assign v62bf25 = w4;
 assign v4642b6 = w5;
 v6bdcd9 vd88c66 (
  .vcc8c7c(w0),
  .v651522(w9),
  .v2cc41f(w10)
 );
 v6bdcd9 v26a0bb (
  .vcc8c7c(w1),
  .v651522(w7),
  .v2cc41f(w8)
 );
 v25966b v9ea427 (
  .v817794(w3),
  .v4642b6(w6),
  .v0550b6(w8),
  .v24708e(w10)
 );
 vafb28f vc75346 (
  .v515fe7(w2),
  .v3c88fc(w3),
  .va9ac17(w4)
 );
 va1ce30 v40c17f (
  .v817794(w2),
  .v4642b6(w5),
  .vb9cfc3(w6),
  .v0550b6(w7),
  .v24708e(w9)
 );
endmodule

//---------------------------------------------------
//-- Adder-8bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Adder-8bits: Adder of two operands of 8 bits
//---------------------------------------------------
//---- Top entity
module v6bdcd9 (
 input [7:0] vcc8c7c,
 output [3:0] v651522,
 output [3:0] v2cc41f
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:7] w2;
 assign v651522 = w0;
 assign v2cc41f = w1;
 assign w2 = vcc8c7c;
 v6bdcd9_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus8-Split-half
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus8-Split-half: Split the 8-bits bus into two buses of the same size
//---------------------------------------------------

module v6bdcd9_v9a2a06 (
 input [7:0] i,
 output [3:0] o1,
 output [3:0] o0
);
 assign o1 = i[7:4];
 assign o0 = i[3:0];
endmodule
//---- Top entity
module v25966b (
 input [3:0] v0550b6,
 input [3:0] v24708e,
 output v4642b6,
 output [3:0] v817794
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 assign w5 = v24708e;
 assign w6 = v0550b6;
 assign v817794 = w7;
 assign v4642b6 = w9;
 v1ea21d vdbe125 (
  .v4642b6(w0),
  .v8e8a67(w2),
  .v27dec4(w15),
  .v82de4f(w18)
 );
 vad119b vb8ad86 (
  .v0ef266(w0),
  .v8e8a67(w1),
  .v4642b6(w3),
  .v27dec4(w14),
  .v82de4f(w17)
 );
 vad119b v5d29b2 (
  .v0ef266(w3),
  .v8e8a67(w4),
  .v4642b6(w8),
  .v27dec4(w12),
  .v82de4f(w16)
 );
 vc4f23a vf4a6ff (
  .v985fcb(w5),
  .v4f1fd3(w13),
  .vda577d(w16),
  .v3f8943(w17),
  .v64d863(w18)
 );
 vc4f23a v9d4632 (
  .v985fcb(w6),
  .v4f1fd3(w11),
  .vda577d(w12),
  .v3f8943(w14),
  .v64d863(w15)
 );
 v84f0a1 v140dbf (
  .vee8a83(w1),
  .v03aaf0(w2),
  .vf8041d(w4),
  .v11bca5(w7),
  .vd84a57(w10)
 );
 vad119b v5c5937 (
  .v0ef266(w8),
  .v4642b6(w9),
  .v8e8a67(w10),
  .v27dec4(w11),
  .v82de4f(w13)
 );
endmodule

//---------------------------------------------------
//-- Adder-4bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Adder-4bits: Adder of two operands of 4 bits
//---------------------------------------------------
//---- Top entity
module v1ea21d (
 input v27dec4,
 input v82de4f,
 output v4642b6,
 output v8e8a67
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = v82de4f;
 assign w1 = v27dec4;
 assign v4642b6 = w3;
 assign v8e8a67 = w4;
 vad119b vb820a1 (
  .v82de4f(w0),
  .v27dec4(w1),
  .v0ef266(w2),
  .v4642b6(w3),
  .v8e8a67(w4)
 );
 vd30ca9 v23ebb6 (
  .v9fb85f(w2)
 );
endmodule

//---------------------------------------------------
//-- Adder-1bit
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Adder-1bit: Adder of two operands of 1 bit
//---------------------------------------------------
//---- Top entity
module vad119b (
 input v27dec4,
 input v82de4f,
 input v0ef266,
 output v4642b6,
 output v8e8a67
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 assign v8e8a67 = w1;
 assign v4642b6 = w5;
 assign w6 = v27dec4;
 assign w7 = v27dec4;
 assign w8 = v82de4f;
 assign w9 = v82de4f;
 assign w10 = v0ef266;
 assign w11 = v0ef266;
 assign w2 = w0;
 assign w7 = w6;
 assign w9 = w8;
 assign w11 = w10;
 vd12401 v2e3d9f (
  .vcbab45(w0),
  .v0e28cb(w7),
  .v3ca442(w9)
 );
 vd12401 vb50462 (
  .v0e28cb(w0),
  .vcbab45(w1),
  .v3ca442(w11)
 );
 vba518e v4882f4 (
  .v3ca442(w2),
  .vcbab45(w3),
  .v0e28cb(w10)
 );
 vba518e v8fcf41 (
  .vcbab45(w4),
  .v0e28cb(w6),
  .v3ca442(w8)
 );
 v873425 vc5b8b9 (
  .v3ca442(w3),
  .v0e28cb(w4),
  .vcbab45(w5)
 );
endmodule

//---------------------------------------------------
//-- AdderC-1bit
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- AdderC-1bit: Adder of two operands of 1 bit plus the carry in
//---------------------------------------------------
//---- Top entity
module vd12401 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vd12401_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- XOR2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- XOR gate: two bits input xor gate
//---------------------------------------------------

module vd12401_vf4938a (
 input a,
 input b,
 output c
);
 //-- XOR gate
 //-- Verilog implementation
 
 assign c = a ^ b;
 
endmodule
//---- Top entity
module v873425 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v873425_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- OR2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- OR2: Two bits input OR gate
//---------------------------------------------------

module v873425_vf4938a (
 input a,
 input b,
 output c
);
 //-- OR Gate
 //-- Verilog implementation
 
 assign c = a | b;
 
 
endmodule
//---- Top entity
module vd30ca9 (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 vd30ca9_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

//---------------------------------------------------
//-- bit-0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Constant bit 0
//---------------------------------------------------

module vd30ca9_vb2eccd (
 output q
);
 //-- Constant bit-0
 assign q = 1'b0;
 
 
endmodule
//---- Top entity
module vc4f23a (
 input [3:0] v985fcb,
 output v4f1fd3,
 output vda577d,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:3] w4;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign vda577d = w2;
 assign v4f1fd3 = w3;
 assign w4 = v985fcb;
 vc4f23a_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .o2(w2),
  .o3(w3),
  .i(w4)
 );
endmodule

//---------------------------------------------------
//-- Bus4-Split-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus4-Split-all: Split the 4-bits bus into its wires
//---------------------------------------------------

module vc4f23a_v9a2a06 (
 input [3:0] i,
 output o3,
 output o2,
 output o1,
 output o0
);
 assign o3 = i[3];
 assign o2 = i[2];
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module v84f0a1 (
 input vd84a57,
 input vf8041d,
 input vee8a83,
 input v03aaf0,
 output [3:0] v11bca5
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:3] w4;
 assign w0 = vee8a83;
 assign w1 = v03aaf0;
 assign w2 = vf8041d;
 assign w3 = vd84a57;
 assign v11bca5 = w4;
 v84f0a1_v9a2a06 v9a2a06 (
  .i1(w0),
  .i0(w1),
  .i2(w2),
  .i3(w3),
  .o(w4)
 );
endmodule

//---------------------------------------------------
//-- Bus4-Join-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus4-Join-all: Join all the wires into a 4-bits Bus
//---------------------------------------------------

module v84f0a1_v9a2a06 (
 input i3,
 input i2,
 input i1,
 input i0,
 output [3:0] o
);
 assign o = {i3, i2, i1, i0};
 
endmodule
//---- Top entity
module vafb28f (
 input [3:0] v515fe7,
 input [3:0] v3c88fc,
 output [7:0] va9ac17
);
 wire [0:7] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 assign va9ac17 = w0;
 assign w1 = v515fe7;
 assign w2 = v3c88fc;
 vafb28f_v9a2a06 v9a2a06 (
  .o(w0),
  .i1(w1),
  .i0(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus8-Join-half
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus8-Join-half: Join the two same halves into an 8-bits Bus
//---------------------------------------------------

module vafb28f_v9a2a06 (
 input [3:0] i1,
 input [3:0] i0,
 output [7:0] o
);
 assign o = {i1, i0};
 
endmodule
//---- Top entity
module va1ce30 (
 input [3:0] v0550b6,
 input [3:0] v24708e,
 input vb9cfc3,
 output v4642b6,
 output [3:0] v817794
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 assign w5 = v24708e;
 assign w6 = v0550b6;
 assign v817794 = w7;
 assign v4642b6 = w9;
 assign w11 = vb9cfc3;
 vad119b vb8ad86 (
  .v0ef266(w0),
  .v8e8a67(w1),
  .v4642b6(w3),
  .v27dec4(w15),
  .v82de4f(w18)
 );
 vad119b v5d29b2 (
  .v0ef266(w3),
  .v8e8a67(w4),
  .v4642b6(w8),
  .v27dec4(w13),
  .v82de4f(w17)
 );
 vc4f23a vf4a6ff (
  .v985fcb(w5),
  .v4f1fd3(w14),
  .vda577d(w17),
  .v3f8943(w18),
  .v64d863(w19)
 );
 vc4f23a v9d4632 (
  .v985fcb(w6),
  .v4f1fd3(w12),
  .vda577d(w13),
  .v3f8943(w15),
  .v64d863(w16)
 );
 v84f0a1 v140dbf (
  .vee8a83(w1),
  .v03aaf0(w2),
  .vf8041d(w4),
  .v11bca5(w7),
  .vd84a57(w10)
 );
 vad119b v5c5937 (
  .v0ef266(w8),
  .v4642b6(w9),
  .v8e8a67(w10),
  .v27dec4(w12),
  .v82de4f(w14)
 );
 vad119b v3599be (
  .v4642b6(w0),
  .v8e8a67(w2),
  .v0ef266(w11),
  .v27dec4(w16),
  .v82de4f(w19)
 );
endmodule

//---------------------------------------------------
//-- AdderC-4bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- AdderC-4bits: Adder of two operands of 4 bits and Carry in
//---------------------------------------------------
//---- Top entity
module v359a55 (
 input [7:0] v02d898,
 input [7:0] vd6b984,
 input v50d6c6,
 output [7:0] vf24dba
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 assign w0 = v50d6c6;
 assign w1 = vd6b984;
 assign w2 = v02d898;
 assign vf24dba = w3;
 v359a55_ve4e0df ve4e0df (
  .sel(w0),
  .i0(w1),
  .i1(w2),
  .o(w3)
 );
endmodule

//---------------------------------------------------
//-- Mux 2 a 1 de 8 bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Multiplexor de 2 a 1 de 8 bits
//---------------------------------------------------

module v359a55_ve4e0df (
 input [7:0] i1,
 input [7:0] i0,
 input sel,
 output [7:0] o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 8 bits
 
 reg [7:0] o;
 
 always @(*) begin
     case(sel)
         0: o = i0;
         1: o = i1;
         default: o = i0;
     endcase
 end
 
 
endmodule
